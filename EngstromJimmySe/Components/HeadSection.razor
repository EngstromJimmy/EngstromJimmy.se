@using System.ComponentModel
@namespace EngstromJimmySe.Components
@using EngstromJimmySe.Services
@inject AppStateService appstate
<!--Whatever tags you want-->
<title>@appstate.Title</title>
<!-- COMMON TAGS -->
<meta charset="utf-8">
<!-- Search Engine -->
<meta name="description" content="Jimmy´s blog">
<meta name="image" content="http://engstromjimmy.se/images/jimmy.png">
<!-- Schema.org for Google -->
<meta itemprop="name" content="Engstromjimmy.se">
<meta itemprop="description" content="Jimmy´s blog">
<meta itemprop="image" content="http://engstromjimmy.se/images/jimmy.png">
<!-- Twitter -->
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="@appstate.Title">
<meta name="twitter:description" content="@appstate.Title">
<meta name="twitter:site" content="@@Engstromjimmy">
<meta name="twitter:creator" content="@@Engstromjimmy">
<meta name="twitter:image:src" content="http://engstromjimmy.se/images/jimmy.png">
<!-- Twitter - Article -->
<!-- Open Graph general (Facebook, Pinterest & Google+) -->
    <meta name="og:title" content="@appstate.Title">
    <meta name="og:description" content="@appstate.Title">
    <meta name="og:image" content="http://engstromjimmy.se/images/jimmy.png">
    <meta name="og:url" content="http://engstromjimmy.se">
    <meta name="og:site_name" content="engstromjimmy.se">
    <meta name="og:type" content="article">
<!-- Open Graph - Article -->
@*<meta name="article:section" content="Technology">
    <meta name="article:published_time" content="2020-03-15">
    <meta name="article:author" content="Jimmy Engström">
    <meta name="article:tag" content="Blazor">
    <meta name="article:expiration_time" content="2020-03-15">
    <meta name="article:modified_time" content="2020-03-15">*@


@code {
    protected override async Task OnInitializedAsync()
    {
        appstate.PropertyChanged += (object sender, PropertyChangedEventArgs e) =>
        {
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        await base.OnInitializedAsync();
    }
}