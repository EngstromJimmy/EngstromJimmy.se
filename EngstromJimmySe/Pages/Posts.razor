@page "/"
@page "/posts"
@page "/posts/{SearchTerm}"
@using Markdig;
@using System.IO;
@using Microsoft.DocAsCode.MarkdigEngine.Extensions;
@using Markdig.Syntax;
@using Markdig.Renderers.Html;
@using Markdig.Extensions.MediaLinks;
@using Markdig.Parsers;
@using Markdig.Renderers;
@using Markdig.Extensions.Yaml;
@using YamlDotNet.Serialization;
@using YamlDotNet.Serialization;
@using YamlDotNet.Serialization.NamingConventions;
@using YamlDotNet.Core;
@using YamlDotNet.Core.Events;
@using EngstromJimmySe.Services;

@inject BlogService blogService

@if (posts == null)
{

}
else
{
    @foreach (var p in posts.Where(i=>i.Hide!=true).Skip(page * pagesize).Take(pagesize))
    {
        <div class="card">
            @if (!string.IsNullOrEmpty(p.Image))
            {
                <img class="card-img-top" src="@p.Image">
            }
                <div class="card-body">
                <h4 class="card-title">@p.Title</h4>
                <h6 class="card-subtitle mb-2 text-muted">
                    @p.Date.ToString("yyyy-MM-dd")
                    <text> by </text>
                    @p.Author
                </h6>
                <p class="card-text">@((MarkupString)p.GetFirstParagraph())</p>
                <a href="@("post/" + p.PermaLink)" class="card-link">Read More</a>
            </div>
        </div>

    }

    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(page==0?"disabled":"")"><a class="page-link" href="#" @onclick:preventDefault @onclick="@(()=> { page--;StateHasChanged(); })">Previous</a></li>
            <li class="page-item @(((page*pagesize)+pagesize)>totalcount?"disabled":"")"><a class="page-link" href="#" @onclick:preventDefault @onclick="@(()=> { page++;StateHasChanged(); })">Next</a></li>
        </ul>
    </nav>
}


@code {

    [Parameter] public string SearchTerm { get; set; }
    List<BlogPost> posts;
    int pagesize = 10;
    int page = 0;
    int totalcount = 0;
    protected async override Task OnInitializedAsync()
    {

        posts = await blogService.GetPostsAsync(SearchTerm);
        totalcount = posts.Count();
        await base.OnInitializedAsync();
    }

}
